#+title: Meetup-online
#+author: Jin SANO
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: ^:nil


雑なコーディング規約
- これはこうすることを強制するとか言うことでは全然なくて，
  「ぼくはできるだけこうするつもりなので，そう思って読むと読みやすいかも」
  と言うだけ
- 従う必要はないし，むしろもっと良いやり方があるなら是非そうするべき
- 僕がこれに従っていない場合は，おそらく直し忘れなので，できれば直しておいてください


* 不明な点・若干怪しい箇所がある場合

  ??? と書いておいてもらえると，そこを重点的にリファクタします（たぶん）
  - 気軽に書いておいてくれるとむしろ助かる
  - 怪しい箇所は減らしたいので


  
* コメント

  over commenting で全然構わないので，とにかくコメントを書く
  - 関数名と同じコメントとかでも全然オッケー
  - なんか書いておいた方が後でちょい付け足そうと言う気分になりやすいので


  逆に，少しでも冗長だと思ったものは削除して構わない
  - ぼくよりもむしろはたくんのためのものなので

  
** モジュールの説明のコメント

   ソースファイルはその冒頭にモジュールの説明を以下のようにつける
   
   #+BEGIN_SRC typescript
     ////////////////////////////////////////////////////////////////////////////////
     //
     // モジュールの説明
     //
     ////////////////////////////////////////////////////////////////////////////////
   #+END_SRC

   （上下の =//= の数は，80 にしているつもり）


* ライブラリのインポートなど

  使っていないライブラリをインポートしている可能性とかも
  - Emacs （のぼくの現状の環境設定）だと，linter みたいなのは全く使えないので，100% 見落としているだけです
  - 削除してください

  
  
* ディレクトリ構成

  （特に）サブコンポーネントを持つモジュールは，
  モジュール名のディレクトリを作ってその中に入れる
  - つまり，あるディレクトリないでのエントリーポイントはそのディレクトリと同じ名前のファイルの中の同じ名前のモジュール


  ディレクトリには README.md を入れておく
  - ソースコードへのリンクと簡単な説明を書いておく
    

  
* 状態の更新を行う関数について

  
** サブモジュールで定義され，親モジュールで使われる状態の更新を行う関数

   Redux などの導入を後でしやすくするために，
   サブモジュールで定義され，親モジュールで使われる，状態変化（副作用）を起こす関数は，
   `updateWith` + <呼び出す状況> のように命名することにする

   これらの関数は
   1. ゼロ個以上の引数と，一つ前の状態を渡し
   2. 次の状態を返す（この戻り値を使って，状態の更新を行う）

      #+BEGIN_SRC typescript
	// 自分が部屋に入ったとサーバから返事が返ってきた場合
	// 自分の userId と先に部屋にいた人たちの情報をサーバに返してもらう
	socket.on('joined', (myUserId: UserId, jsonStrOtherUsers: string) => {
	    this.setState(state => updateWithJoined(myUserId, jsonStrOtherUsers)(state);
	});
      #+END_SRC


** 親モジュールで定義され，サブモジュールで使われる状態の更新を伴う関数

   Redux を後で導入しやすくするために，
   親モジュールで定義され，サブモジュールで使われる，状態変化（副作用）を起こす関数は，
   `dispatch` + <動作> のように命名することにする
 
   内部でさらに他の状態変化を起こす関数を呼び出す際は，
   1. それらを全て先に呼び出してから，
   2. （必要なら）状態の更新を行う
   ように実装する
 

   #+BEGIN_SRC typescript
     // チャットメッセージの送信による状態変化
     const dispatchSendChatMessage = (chatMessage: ChatMessage) => {
	 this.dispatchSendMessageTo(undefined)({ type: 'chat', chatMessage }); // チャットをブロードキャスト送信
	 this.setState(state => ({
	     ...state, chats: [...state.chats, chatMessage] // 自分のチャットメッセージ一覧にも追加しておく
	 }));
     };
   #+END_SRC


     
